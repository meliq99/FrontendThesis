/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DevicesImport } from './routes/devices'
import { Route as AlgorithmsImport } from './routes/algorithms'
import { Route as IndexImport } from './routes/index'
import { Route as StatisticsIndexImport } from './routes/statistics/index'

// Create/Update Routes

const DevicesRoute = DevicesImport.update({
  id: '/devices',
  path: '/devices',
  getParentRoute: () => rootRoute,
} as any)

const AlgorithmsRoute = AlgorithmsImport.update({
  id: '/algorithms',
  path: '/algorithms',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const StatisticsIndexRoute = StatisticsIndexImport.update({
  id: '/statistics/',
  path: '/statistics/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/algorithms': {
      id: '/algorithms'
      path: '/algorithms'
      fullPath: '/algorithms'
      preLoaderRoute: typeof AlgorithmsImport
      parentRoute: typeof rootRoute
    }
    '/devices': {
      id: '/devices'
      path: '/devices'
      fullPath: '/devices'
      preLoaderRoute: typeof DevicesImport
      parentRoute: typeof rootRoute
    }
    '/statistics/': {
      id: '/statistics/'
      path: '/statistics'
      fullPath: '/statistics'
      preLoaderRoute: typeof StatisticsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/algorithms': typeof AlgorithmsRoute
  '/devices': typeof DevicesRoute
  '/statistics': typeof StatisticsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/algorithms': typeof AlgorithmsRoute
  '/devices': typeof DevicesRoute
  '/statistics': typeof StatisticsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/algorithms': typeof AlgorithmsRoute
  '/devices': typeof DevicesRoute
  '/statistics/': typeof StatisticsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/algorithms' | '/devices' | '/statistics'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/algorithms' | '/devices' | '/statistics'
  id: '__root__' | '/' | '/algorithms' | '/devices' | '/statistics/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AlgorithmsRoute: typeof AlgorithmsRoute
  DevicesRoute: typeof DevicesRoute
  StatisticsIndexRoute: typeof StatisticsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AlgorithmsRoute: AlgorithmsRoute,
  DevicesRoute: DevicesRoute,
  StatisticsIndexRoute: StatisticsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/algorithms",
        "/devices",
        "/statistics/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/algorithms": {
      "filePath": "algorithms.tsx"
    },
    "/devices": {
      "filePath": "devices.tsx"
    },
    "/statistics/": {
      "filePath": "statistics/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
